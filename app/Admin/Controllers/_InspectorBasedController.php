<?php


namespace App\Admin\Controllers;


use App\Admin\Annotations\FieldAttribute;
use App\Admin\Annotations\RelationAttribute;
use App\Admin\Grid\Interfaces\RelationInspectorInterface;
use App\Admin\Supports\FormBuilder;
use App\Http\Controllers\Controller;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Http\Request;
use Illuminate\Http\Response;
use Illuminate\Support\Facades\DB;
use Illuminate\Validation\ValidationException;
use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;
use Symfony\Component\HttpKernel\Exception\ServiceUnavailableHttpException;

abstract class _InspectorBasedController extends Controller
{

    use InspectorControllerTrait;

    const PAGE_SIZE = 10;

    /**
     * @return void
     */
    abstract protected function initialize();


    public function callAction($method, $parameters)
    {
        $this->initialize();
        return parent::callAction($method, $parameters); // TODO: Change the autogenerated stub
    }


    public function store(Request $request)
    {

        $validator = $this->getValidator($request, FieldAttribute::ABLE_CREATE);

        if($validator->fails() === false){
            $inputs = $this->extractInputFromRules($request, $validator->getRules());
            /** @var \App\Models\Form $model */
            $model = $this->newModel();
            $model->fill($inputs);

            DB::beginTransaction();
            try{
                if(!$model->save()){
                    throw new ServiceUnavailableHttpException();
                }

                foreach ($this->activeRelatedNames as $activeRelatedName){
                    /** @var RelationInspectorInterface $relationInspector */
                    $relationInspector = $this->inspector->getRelation($activeRelatedName);
                    $foreignInspector = $relationInspector->getForeignInspector();

                    $modelClass = $foreignInspector->getModelClass();

                    if($relationInspector->getRelationshipType() === RelationAttribute::RELATION_HAS_MANY){

                        foreach ($inputs[$activeRelatedName] as $attributes){
                            if(!$model->{$activeRelatedName}()->save(new $modelClass($attributes))){
                                throw new ServiceUnavailableHttpException();
                            }
                        }
                    }else{
                        if(!$model->{$activeRelatedName}()->save(new $modelClass($inputs[$activeRelatedName]))){
                            throw new ServiceUnavailableHttpException();
                        }
                    }
                }
                DB::commit();
                return \response()->json([
                    'msg' => "保存成功!",
                    'jump' => $this->urlCreator->index(),
                ]);
            }catch (\Exception $e){
                DB::rollback();
                throw new ServiceUnavailableHttpException(null, $e->getMessage(), $e);
            }
        }else{
            throw new ValidationException($validator);
        }
    }

    /**
     * Show the form for editing the specified resource.
     *
     * @param  int  $id
     * @return Response
     */
    public function edit($id)
    {
        $model = $this->newQuery()->find($id);

        if(is_null($model)){
            flash("不存在的{$this->inspector->getTitle()}", "warning");
            return back();
        }

        $form = $this->getForm(FieldAttribute::ABLE_UPDATE);

        $formBuilder = new FormBuilder($form);
        $formBuilder->setMethod("PUT", true);
        $formBuilder->setAction(
            $this->urlCreator->update(["id" => $id])
        );
        $formBuilder->setValue($model->toArray());

        $form = $formBuilder->built();

        $title = "{$model['title']} - 编辑{$this->inspector->getTitle()}";
        $description = "";

        $urlCreator = $this->urlCreator;

        return view("admin::common.edit", compact("form", "title", "description", "urlCreator"));
    }

    /**
     * Update the specified resource in storage.
     *
     * @param  Request  $request
     * @param  int  $id
     * @return Response
     */
    public function update(Request $request, $id)
    {
        $model = $this->newQuery()->find($id);
        if(is_null($model)){
            flash("不存在的{$this->inspector->getTitle()}", "warning");
            throw new NotFoundHttpException("不存在的{$this->inspector->getTitle()}");
        }

        $attributes = $this->validate(
            $request,
            $this->getRules(FieldAttribute::ABLE_CREATE),
            [],
            $this->getLabels()
        );
        $model->fill($attributes);

        if($model->saveOrFail()){
            return \response()->json([
                'msg' => "编辑成功!",
                'jump' => $this->urlCreator->edit($id)
            ]);
        }else{
            throw new ServiceUnavailableHttpException();
        }
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param  int  $id
     * @return Response
     */
    public function destroy(Request $request, $id)
    {
        /** @var Model $model */
        $model = $this->newQuery()->find($id);
        if(is_null($model)){
            throw new NotFoundHttpException("不存在的内容!");
        }

        DB::transaction(function() use($model){
            if(!$model->delete()){
                throw new ServiceUnavailableHttpException("删除失败，请重试!");
            }
        });
        return response()->json([
            'msg' => "删除成功!",
            'jump' => $request->header("REFERER"),
        ]);
    }
}